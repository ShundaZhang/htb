'''
root@ubuntu-s-1vcpu-1gb-lon1-01:~# nc 94.237.56.188 35780

#     #  #####   #####               #       ###   
##   ## #     # #     #             ##      #   #  
# # # # #       #                  # #     #     # 
#  #  #  #####   #####     #    #    #     #     # 
#     #       #       #    #    #    #     #     # 
#     # #     # #     #     #  #     #   ## #   #  
#     #  #####   #####       ##    ##### ##  ###

This is a secure secret sharing scheme with really small threshold. We are pretty sure the key is secure...
    

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32749"}
{"approved": "True", "x": 32749, "y": 237127237524695234888099482008352893482172880609094721125176078750739853347250381531290910569317577970220229354843533933597464140527722367282857477381250334555598558174430013567026540989308164874205619795845820055}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32719"}
{"approved": "True", "x": 32719, "y": 230696390287244582000456485162488612587409423472634561622371779879632800842206235524195122013006825547368698398352188037695648117623180503367539251339045211540389784749434814054958672756856270984212263178286868385}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32717"}
{"approved": "True", "x": 32717, "y": 230273714784202459702294028336000917493060878630815384460251069203000826508050848209877367731419919765413832656156520157901974519838313976317815066523695288662559817521772843799413238011288119061153937558353206903}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32713"}
{"approved": "True", "x": 32713, "y": 229430608436378575214901555497545567030270770328982568785508092380974919893290483113889048253131520244675028283120487362730824463806859445441254535788486575694828610688508923253195673556518737660905043930719806003}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32707"}
{"approved": "True", "x": 32707, "y": 228171541386519692436054256400815574057692532263064910113160351352634953632226235412719462186653231745999201351209370126753502494554548372389931795404467978421315295526234447182552654645508585809853839071767917413}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32693"}
{"approved": "True", "x": 32693, "y": 225259638473891123952253176091716916432970066592396013230176610767752256496667149080700053197710517455758169313988872444536892231391055947316649744902900298110007032318881091340343735861597659903589149516230729823}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32687"}
{"approved": "True", "x": 32687, "y": 224022706609383066760052146129611072656163443175632114726849588800636805518008761291443974252468636446113787962721244184021292162371026972406479418831858424292435508894999950294250208599635068844544979658107231233}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32653"}
{"approved": "True", "x": 32653, "y": 217136483848039939817582093888999961998064049761951116769715425622164732910814698348779581405841959583577632144251941774103254543414793193068920911159674894451176418511087848312810735143091536960578784204827115063}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32647"}
{"approved": "True", "x": 32647, "y": 215942700636467617097127303872214579331957700647898634450293427163918979616418020526169401694484662039722362047789072469378652966593472370755372214205905171798556539608495312310574185787514841065913585570038222073}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32633"}
{"approved": "True", "x": 32633, "y": 213181827636303110596321013833966404910350733867600710388489103836065282044687228476496140682426085054393025063463613361972331378589150333319803986261245475283777268975597134952140038830958455963780646851776928483}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32621"}
{"approved": "True", "x": 32621, "y": 210842550273098346520429425064323611972692415832377303404313594157197519481881014678054785258238464783392222479563252526196866892820684335295108689799116315411128044710355384156054657658249022022671459747299814935}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32611"}
{"approved": "True", "x": 32611, "y": 208912125083686437504893769048263886226414467241251428396875059625607465274902246151516325117207994034189848105908718941013777440262654444639629270294060640915675620897225762276578296592307617782715264075971925125}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32609"}
{"approved": "True", "x": 32609, "y": 208528095610575540707813194151463652173176758987471534027901675534252448839864594095336589039562759529194952068132756592344874176712484551518091416627325896297187964198594692210009648580899293763779247321165976395}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32603"}
{"approved": "True", "x": 32603, "y": 207380097190173967426217504862898893644959225383477446542665559129270548003126636868333778584684733156032712517048690132649685996827420399628306742443474015561841698572144151569720115660744093949321829976656419613}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32587"}
{"approved": "True", "x": 32587, "y": 204348556232643213351017291382033531193546220610069079976718641262143718107438581228963006924447108222469554682940824817105537309431108973204948847057881089880566869938915725552264858405370405298349062798287296333}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32579"}
{"approved": "True", "x": 32579, "y": 202848894883227168730810094747653953107397445843482245771500557785839722223900317987849733628860605098219554003215208221136948414879348493377426155962657472986834910587180748993221266321275531524459622498782647525}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32573"}
{"approved": "True", "x": 32573, "y": 201731136272008273358929994287798108465818617381390227640743489630291149518549652893945242866453420263769951432074620748007126777107854208084579530687368064326361808371404629460964549548881237235603752676825363943}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32569"}
{"approved": "True", "x": 32569, "y": 200989274078444630325221988146330208447903127078234708187535286407856915296449751861013909228759568527544007234264225452731503859826030355378848240481344771112016214670879169575396285516533488051639003803066384035}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32563"}
{"approved": "True", "x": 32563, "y": 199881423395805641253261337373835032471133017772413904560237346141797766732329189764470716385886225774786258222430952623711750721340777418021962837450953212322479918598649972889868457232798954168541703846976037653}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"get_share", "x":"32563"}
{"approved": "False", "reason": "Enough shares for today."}

Send in JSON format any of the following commands.

    - Get your share
    - Encrypt flag
    - Exit

query = {"command":"encrypt_flag"}

[+] Here is your encrypted flag : {"iv": "349fa3e16425a8ce08f09c54f061211f", "enc_flag": "1f9ecb9099b54711a52103ece7b6bf2ff39125db34ec3be6c5eb84792385b4e04b97a0cf9cd1033230480346957ebae3"}.

sage: crt([14394, 16197, 32017, 22415, 14810, 32011, 11373, 14137, 29012, 13385, 68, 11729, 32342, 15704, 7120, 20092, 27810, 25588, 9337],[32749,32719,32717,32713,32707,32693,3268
....: 7,32653,32647,32633,32621,32611,32609,32603,32587,32579,32573,32569,32563])
30942609782766745231489927017635913463465346458005326399282517276838922504206


'''

def is_prime(n):
    """Check if a number is prime."""
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def find_primes(start, count):
    """Find 'count' number of primes starting from 'start'."""
    primes = []
    num = start
    while len(primes) < count:
        if is_prime(num):
            primes.append(num)
        num -= 1
    return primes

start_number = 2 ** 15  # Start from 2^15
prime_count = 19         # Find 19 primes

primes = find_primes(start_number, prime_count)
print("The 19 prime numbers starting from 2^15 downwards are:")
print(primes)

for i in primes:
    print('{"command":"get_share", "x":"'+str(i)+'"}')

c1 = [237127237524695234888099482008352893482172880609094721125176078750739853347250381531290910569317577970220229354843533933597464140527722367282857477381250334555598558174430013567026540989308164874205619795845820055,230696390287244582000456485162488612587409423472634561622371779879632800842206235524195122013006825547368698398352188037695648117623180503367539251339045211540389784749434814054958672756856270984212263178286868385,230273714784202459702294028336000917493060878630815384460251069203000826508050848209877367731419919765413832656156520157901974519838313976317815066523695288662559817521772843799413238011288119061153937558353206903,229430608436378575214901555497545567030270770328982568785508092380974919893290483113889048253131520244675028283120487362730824463806859445441254535788486575694828610688508923253195673556518737660905043930719806003,228171541386519692436054256400815574057692532263064910113160351352634953632226235412719462186653231745999201351209370126753502494554548372389931795404467978421315295526234447182552654645508585809853839071767917413,225259638473891123952253176091716916432970066592396013230176610767752256496667149080700053197710517455758169313988872444536892231391055947316649744902900298110007032318881091340343735861597659903589149516230729823,224022706609383066760052146129611072656163443175632114726849588800636805518008761291443974252468636446113787962721244184021292162371026972406479418831858424292435508894999950294250208599635068844544979658107231233,217136483848039939817582093888999961998064049761951116769715425622164732910814698348779581405841959583577632144251941774103254543414793193068920911159674894451176418511087848312810735143091536960578784204827115063,215942700636467617097127303872214579331957700647898634450293427163918979616418020526169401694484662039722362047789072469378652966593472370755372214205905171798556539608495312310574185787514841065913585570038222073,213181827636303110596321013833966404910350733867600710388489103836065282044687228476496140682426085054393025063463613361972331378589150333319803986261245475283777268975597134952140038830958455963780646851776928483,210842550273098346520429425064323611972692415832377303404313594157197519481881014678054785258238464783392222479563252526196866892820684335295108689799116315411128044710355384156054657658249022022671459747299814935,208912125083686437504893769048263886226414467241251428396875059625607465274902246151516325117207994034189848105908718941013777440262654444639629270294060640915675620897225762276578296592307617782715264075971925125,208528095610575540707813194151463652173176758987471534027901675534252448839864594095336589039562759529194952068132756592344874176712484551518091416627325896297187964198594692210009648580899293763779247321165976395,207380097190173967426217504862898893644959225383477446542665559129270548003126636868333778584684733156032712517048690132649685996827420399628306742443474015561841698572144151569720115660744093949321829976656419613,204348556232643213351017291382033531193546220610069079976718641262143718107438581228963006924447108222469554682940824817105537309431108973204948847057881089880566869938915725552264858405370405298349062798287296333,202848894883227168730810094747653953107397445843482245771500557785839722223900317987849733628860605098219554003215208221136948414879348493377426155962657472986834910587180748993221266321275531524459622498782647525,201731136272008273358929994287798108465818617381390227640743489630291149518549652893945242866453420263769951432074620748007126777107854208084579530687368064326361808371404629460964549548881237235603752676825363943,200989274078444630325221988146330208447903127078234708187535286407856915296449751861013909228759568527544007234264225452731503859826030355378848240481344771112016214670879169575396285516533488051639003803066384035,199881423395805641253261337373835032471133017772413904560237346141797766732329189764470716385886225774786258222430952623711750721340777418021962837450953212322479918598649972889868457232798954168541703846976037653]
m1 = [32749,32719,32717,32713,32707,32693,32687,32653,32647,32633,32621,32611,32609,32603,32587,32579,32573,32569,32563]

c2 = []
for i in range(len(c1)):
    c2.append(c1[i]%m1[i])

print(c2)

from hashlib import sha256
from Crypto.Util.number import bytes_to_long,long_to_bytes
from Crypto.Cipher import AES

k = 30942609782766745231489927017635913463465346458005326399282517276838922504206
key = sha256(str(k).encode()).digest()
iv = bytes.fromhex('349fa3e16425a8ce08f09c54f061211f')
ct = bytes.fromhex('1f9ecb9099b54711a52103ece7b6bf2ff39125db34ec3be6c5eb84792385b4e04b97a0cf9cd1033230480346957ebae3')
cipher = AES.new(key, AES.MODE_CBC, iv)
pt = cipher.decrypt(ct)
print(pt)
