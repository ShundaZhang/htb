import gmpy2
from Crypto.Util.number import long_to_bytes

N = 96124936107896748280555244677021991330091778649135119790286533059582754409293601619525608937362904170585046388534482094091790568122866360316740693418876264680551778543440000535075643338759767637391693271627644627735703513501276657327234250653312367333508135208249266632071094632385510113463482633032902002209
phi = 96124936107896748280555244677021991330091778649135119790286533059582754409293601619525608937362904170585046388534482094091790568122866360316740693418876244909857319694820595566002064612532239556729264541411304166794719906273078548635013448269328260390344716890710955831745947175474039259985922959198890019520
c = 73768441445534366094179924469096308517150252676550180334388266995323103668455066379492998763230781400040943262495933790926763837035987500473819133396331337773158513498258165244441366920269991534384249399609012360187691686166465942948115843071301265885918886611330710485872651759089228342533221104984978662208

e = 8192
k = 1

'''
#sage
while gcd(phi/k, e) != 1:
	k = k*gcd(phi/k, e)

print(k)
'''
k = 64

R = []
max = 4096
for a in range(1, max):
	r = pow(a, phi//k, N)
	R.append(r)

#print(R)

d = gmpy2.invert(e, phi//k)
g = pow(c, d, N)

for l in R:
    m = (l*g) % N
    if pow(m, e, N) == c:
        print(long_to_bytes(m))

#b'm3m0ry'
