

# This file was *autogenerated* from the file dec.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0x10001 = Integer(0x10001); _sage_const_31909 = Integer(31909); _sage_const_4 = Integer(4); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_6 = Integer(6); _sage_const_2 = Integer(2); _sage_const_643 = Integer(643); _sage_const_0p4 = RealNumber('0.4'); _sage_const_0xdeadbeef = Integer(0xdeadbeef); _sage_const_0x1337 = Integer(0x1337); _sage_const_16 = Integer(16)#https://hackmd.io/@dogdogeatcatcat/rJav0g-93#Interception
#https://www.youtube.com/watch?v=xmnbRIYVsfQ&t=2123s

from pwn import *

from hashlib import sha256
from Crypto.Util.number import isPrime, getPrime, long_to_bytes, bytes_to_long
from Crypto.Util.Padding import pad, unpad
from Crypto.Cipher import AES
from pool import GREET, ANS

e = _sage_const_0x10001 
#context.log_level = 'debug'

#io = process('./server.py')
ip, port = "167.172.62.51", _sage_const_31909 
io = remote(ip, port)

io.recvuntil('We say : ')
buf = io.recvline().strip()
#print(buf)
c1 = bytes_to_long(bytes.fromhex(buf.decode()))

io.recvuntil('>')
io.sendline(b'S')
io.recvuntil('You say : ')
io.sendline(buf)
buf = io.recvline()
#print(buf.decode().split(' ')[4].strip().encode())
c2 = bytes_to_long(bytes.fromhex(buf.decode().split(' ')[_sage_const_4 ].strip()))

#print(c1, c2)

N = _sage_const_0 
ph = _sage_const_0 
for i in range(len(GREET)):
	if N != _sage_const_0 :
		break
	m1 = bytes_to_long(GREET[i].encode())
	for j in range(len(ANS)):
		m2 = bytes_to_long(ANS[j].encode())
		n = gcd(m1**e - c1, m2**e - c2)
		if n == _sage_const_1 :
			continue
		#print(f'GCD N: {n}, {int(n).bit_length()}')
		io.recvuntil('>')
		io.sendline(b'F')
		io.recvuntil('you know the public key :')
		io.sendline(sha256(str(n).encode()).digest().hex())
		buf = io.recvline()
		#print(buf)
		if b'Get out!' in buf:
			continue
		else:
			print(f'N found! {n}')
			N = n
			ph = int(buf.decode().split(' ')[_sage_const_6 ].strip())
			break

if N == _sage_const_0 :
	print('Try Again!')
	exit(_sage_const_0 )

ln = int(N).bit_length()//_sage_const_2 
ll = ln - _sage_const_643 
hp = (ph >> ll) << ll
#print(hp)

R = PolynomialRing(Zmod(N), names=('x',)); (x,) = R._first_ngens(1)
P = hp + x
#x0 = P.small_roots()[0] #too large, need to limit
x0 = P.small_roots(X=_sage_const_2 **ll, beta=_sage_const_0p4 )[_sage_const_0 ]
print(x0)

p = P(x0)
print(p)

q = N//int(p)

#print(p, q)

phi = (p-_sage_const_1 )*(q-_sage_const_1 )
a = _sage_const_0xdeadbeef 
ct = _sage_const_0x1337 
#Fermatâ€™s little theorem
an = pow(a, N, phi)
key = pow(ct, an, N)

io.recvuntil('>')
io.sendline(b'R')
io.recvuntil('Enter decryption key :')
io.sendline(long_to_bytes(int(key))[:_sage_const_16 ].hex().encode())
print(io.recvall())

