#https://zhuanlan.zhihu.com/p/368002164
#https://susanou.github.io/Writeups/posts/composition/

'''
Welcome to the ECRSA test center. Your encrypted data will be sent soon.
Please check the logs for the parameters.
Generating your key...
Creating ECC params
Encrypted flag: 74fcb664d32387c53e4d99d0d55ddc0ac7c330001551e53872f0d386cd820a411c15d2f9bf8f851b24bb0301c4b51d3a9a58ef76b7988065d6dcf4915ce4cfd0
IV: 3a0b1cd88e2fe007f6c0332e8ba119da
N: 10289562578458710424274507194086829817050984240222547592851639332572470430240639824743454077987245642008922463955822593313437272156555953825628000442680061
ECRSA Ciphertext: Point(x=5903637122809662755515021947736995168754672287426805126843989912574589122079777575988540257962741079681243265687009173675236168275983715754009469653492135, y=5749847131051177758569673850930018781121249835620885862595195976699669230352665565625560358291679473334581067739487729131754729527524453233132962213708391)
Would you like to test the ECRSA curve?
[y/n]> y
Generating random point...
Point(x=3906643222530585042456969769301739614689640269113009394040004918169121873487874512450236462959296122963658602411955341130099240402080732226874266602746293, y=5869292860658605403673262483720600453163242457844947492678534974628434334572672947350399708351042397558403047544247521858807062925199011715632779269946274)
Thanks for testing!
'''
import gmpy2
from Crypto.Util.number import *
from ecc import EllipticCurve, Point, crt
from Crypto.Cipher import AES
from hashlib import md5

def next_prime(num):
	if num % 2 == 0:
		num += 1
	else:
		num += 2
	while not isPrime(num):
		num += 2
	return num

n = 10289562578458710424274507194086829817050984240222547592851639332572470430240639824743454077987245642008922463955822593313437272156555953825628000442680061

#yafu factor
q = 101437481132265456231017587483701417322155986175910603561924998386321564346827
p = 101437481132265456231017587483701417322155986175910603561924998386321564339543
#print n
#print p
#print q
#print p*q

bits = 512
e = next_prime(p >> (bits // 4))
#print e

#q = next_prime(p)
#for i in range(50):
#	q = next_prime(q)
#while q % 4 == 1:
#	q = next_prime(q)
#print q

#y**2 = x**3 + a*x**2 + b
x1=5903637122809662755515021947736995168754672287426805126843989912574589122079777575988540257962741079681243265687009173675236168275983715754009469653492135
y1=5749847131051177758569673850930018781121249835620885862595195976699669230352665565625560358291679473334581067739487729131754729527524453233132962213708391

x2=3906643222530585042456969769301739614689640269113009394040004918169121873487874512450236462959296122963658602411955341130099240402080732226874266602746293
y2=5869292860658605403673262483720600453163242457844947492678534974628434334572672947350399708351042397558403047544247521858807062925199011715632779269946274

a = (y1**2 - y2**2 - (x1**3 - x2**3))*gmpy2.invert((x1-x2), n)%n
b = (y1**2 - x1**3 - a*x1)%n

print 'x =', x1
print 'y =', y1
print 'n =', n
print 'p =', p
print 'q =', q
print 'a =', a
print 'b =', b
print 'e =', e

#verify
#print (y1**2 - (x1**3+a*x1+b)) %n
#print (y2**2 - (x2**3+a*x2+b)) %n

EC = EllipticCurve(a, b, n)
P = Point(x1, y1)

#sage dec.sage
phip = 101437481132265456231017587483701417322274914902482212037719342806369911684424
phiq = 101437481132265456231017587483701417321848713057854570544334049420690577146275

dp = gmpy2.invert(e, phip)
dq = gmpy2.invert(e, phiq)

dn = crt([dp, phip], [dq, phiq])

G = EC.multiply(P, dn)
PP = EC.multiply(G, e)

#verify
#print PP
#print P

key = md5(str(G.x).encode()).digest()
iv = '3a0b1cd88e2fe007f6c0332e8ba119da'.decode('hex')
cipher = AES.new(key,AES.MODE_CBC,iv)
enc_flag = '74fcb664d32387c53e4d99d0d55ddc0ac7c330001551e53872f0d386cd820a411c15d2f9bf8f851b24bb0301c4b51d3a9a58ef76b7988065d6dcf4915ce4cfd0'.decode('hex')
print cipher.decrypt(enc_flag)
#HTB{Pr1M3_Pr0x1mIty_@nD_C0mP0s1T3_CuRv3?????=>s0_1nS3cUr3!!!}
