

# This file was *autogenerated* from the file dec2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_100000000000000000 = Integer(100000000000000000); _sage_const_146316399546 = Integer(146316399546); _sage_const_17250030801 = Integer(17250030801); _sage_const_630879386133 = Integer(630879386133); _sage_const_397653533092 = Integer(397653533092); _sage_const_695814196879 = Integer(695814196879); _sage_const_23349281323106688 = Integer(23349281323106688); _sage_const_631998598259 = Integer(631998598259); _sage_const_137220533053 = Integer(137220533053); _sage_const_237545077271 = Integer(237545077271); _sage_const_479462837147 = Integer(479462837147); _sage_const_670052303779 = Integer(670052303779); _sage_const_24299410991 = Integer(24299410991); _sage_const_95721551380 = Integer(95721551380); _sage_const_2 = Integer(2); _sage_const_4 = Integer(4)
def movAttack(G, Q):
    k = _sage_const_1 
    while (p**k - _sage_const_1 ) % E.order():
        k += _sage_const_1 

    Ee = EllipticCurve(GF(p**k, 'y'), [a, b])

    R = Ee.random_point()
    m = R.order()
    d = gcd(m, G.order())
    B = (m // d) * R

    if not (G.order() / B.order() in ZZ):
    	return _sage_const_0 
    if G.order() != B.order():
    	return _sage_const_0 

    Ge = Ee(G)
    Qe = Ee(Q)

    n = G.order()
    alpha = Ge.weil_pairing(B, n)
    beta = Qe.weil_pairing(B, n)

    #print('Computing log...')
    nQ = beta.log(alpha)
    return nQ


a = _sage_const_100000000000000000  
b = _sage_const_0  
Gx = _sage_const_146316399546  
Gy = _sage_const_17250030801  
Qx = _sage_const_630879386133  
Qy = _sage_const_397653533092  
p = _sage_const_695814196879 

E = EllipticCurve(GF(p), [a, b])

G = E(Gx, Gy)
Q = E(Qx, Qy)

QA = []

'''
for _ in range(10**7):
    nQ = movAttack(G, Q)
    if nQ == 0:
        continue
    if nQ not in QA:
        QA.append(nQ)
        print(QA)

factors = [4412475261, 510459163901, 162552065461, 5993871163, 92970645773, 75575290851, 32086903546, 23389226085, 5532047581, 2453223701, 144105791, 458985506, 214079061, 1249683457, 605929373, 913811761, 298046985, 493972141]

print(G)
print(Q)
for i in range(len(factors)):
	Gn = factors[i]*G
	print(Gn)

k = discrete_log(Q, G, G.order(),operation='+')  
print("k:", k)
k = discrete_log(-G, G, G.order(),operation='+')  
print("k:", k)

#k: 510459163901
#k: 695814196879

print(G)
print(Q)
Gn = 510459163901*695814196879*695814196879*695814196879*695814196879*G
print(Gn)
Gn = 695814196879*695814196879*G
print(Gn)
'''


#100000000000000000 23349281323106688 631998598259 137220533053 237545077271 479462837147 670052303779

a = _sage_const_100000000000000000 
b = _sage_const_23349281323106688 
Gx = _sage_const_631998598259 
Gy = _sage_const_137220533053 
Qx = _sage_const_237545077271 
Qy = _sage_const_479462837147 
p = _sage_const_670052303779 

E = EllipticCurve(GF(p), [a, b])

G = E(Gx, Gy)
Q = E(Qx, Qy)

k = discrete_log(Q, G, operation='+')
print("k:", k)
k = discrete_log(-G, G, operation='+')
print("k:", k)

k1 = _sage_const_24299410991 
k2 = _sage_const_95721551380 

print(G)
print(Q)
Gn = k1*k2**_sage_const_2 *G
print(Gn)
Gn = k1*k2**_sage_const_4 *G
print(Gn)


