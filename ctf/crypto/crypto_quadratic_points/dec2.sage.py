

# This file was *autogenerated* from the file dec2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_100000000000000000 = Integer(100000000000000000); _sage_const_0 = Integer(0); _sage_const_146316399546 = Integer(146316399546); _sage_const_17250030801 = Integer(17250030801); _sage_const_630879386133 = Integer(630879386133); _sage_const_397653533092 = Integer(397653533092); _sage_const_695814196879 = Integer(695814196879)
def movAttack(G, Q):
    k = _sage_const_1 
    while (p**k - _sage_const_1 ) % E.order():
        k += _sage_const_1 

    Ee = EllipticCurve(GF(p**k, 'y'), [a, b])

    R = Ee.random_point()
    m = R.order()
    d = gcd(m, G.order())
    B = (m // d) * R

    assert G.order() / B.order() in ZZ
    assert G.order() == B.order()

    Ge = Ee(G)
    Qe = Ee(Q)

    n = G.order()
    alpha = Ge.weil_pairing(B, n)
    beta = Qe.weil_pairing(B, n)

    print('Computing log...')
    nQ = beta.log(alpha)
    return nQ


a = _sage_const_100000000000000000  
b = _sage_const_0  
Gx = _sage_const_146316399546  
Gy = _sage_const_17250030801  
Qx = _sage_const_630879386133  
Qy = _sage_const_397653533092  
p = _sage_const_695814196879 

E = EllipticCurve(GF(p), [a, b])

G = E(Gx, Gy)
Q = E(Qx, Qy)

nQ = movAttack(G, Q)

print(nQ)


