

# This file was *autogenerated* from the file lll.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0p7039096773343625 = RealNumber('0.7039096773343625'); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_0 = Integer(0); _sage_const_10 = Integer(10); _sage_const_17 = Integer(17); _sage_const_2 = Integer(2); _sage_const_13 = Integer(13); _sage_const_60 = Integer(60)#The challenge updated and need to use LLL to pass the step 1.

import sys

arguments = sys.argv[_sage_const_1 :]

#x = float(arguments[0])
#print(x)
x = -_sage_const_0p7039096773343625 

M = Matrix(ZZ,_sage_const_3 ,_sage_const_4 )
M[_sage_const_0 ] = [_sage_const_1 , _sage_const_0 , _sage_const_0 , _sage_const_10 **_sage_const_17 *x**_sage_const_2 ]
M[_sage_const_1 ] = [_sage_const_0 , _sage_const_1 , _sage_const_0 , _sage_const_10 **_sage_const_17 *x]
M[_sage_const_2 ] = [_sage_const_0 , _sage_const_0 , _sage_const_1 , _sage_const_10 **_sage_const_17 ]
L = M.LLL()
print(L)

ai, bi, ci = int(L[_sage_const_0 ][_sage_const_0 ]), int(L[_sage_const_0 ][_sage_const_1 ]), int(L[_sage_const_0 ][_sage_const_2 ])

res = ai*x**_sage_const_2  + bi*x + ci
res *= _sage_const_10 **_sage_const_13  # did you think I would be that careless?

if int(res) != _sage_const_0  or any(i == _sage_const_0  or abs(i) > _sage_const_60  for i in [ai, bi, ci]):
	print("Nope!")
	exit()

print("You passed the first test, now onto the second\n")


