#!/usr/bin/python3
#https://en.wikipedia.org/wiki/Paillier_cryptosystem

import gmpy2

#gm*rn % n2 == c1
#rn % n2 == c2

#m = 0
c1 = 79457667892030077110408120812944661150594282817740043773828804580067204775613012793059449324880332388575792564388067489160126724677363995566381591888860412200814845482646556340741575112245236580417155922629815156527548606211160495278917603216858646087906023625639534560656675510260350629632087250329557319188097506413708720885213778457218507497751639066068819334973737507261802459574651136096045061093859881992673025602430847764923397358458379210956047293725310009363182902158452090451048328006657989718624674678693186232657231180517914239179916632467434483831671764047075906473644552321951696202400804976131508681687256437239385688677032205023028737076587681155381732400778990949862982287668487357869674022399769873863169276295070658420924500580411167255336527820391209883624105847324282738337795578045291092450697843889478167573673357603251600033257518346892682359370210881363966302946097153954029803547396496235675151598574016985450601493160203308928775361339821413334945389055259735232456429612400513535704474710875799375137905992309660474612308294145389917285523286933330766793637837663398172257179444845712733789466729550364210946909640556162386781207436690136327548734746490775778175567855698114479932552128125738573597231151

#m = 1, optim = 1
c2 = 50939677855608982431036643386977531996639013935329164002530486255585643295689738438756851162428035612794098613628097854864906382434696525530615318053140686864507839358112052020734429127485138576076357502716659821037377374417949848460777636696092076227079291355278624961040978933590553428816405254626914452207319543055421403311733523191566598423585947451370111559909186828169405533482826316319971284798715622208835735547966040577176211580100505308572249355255855592084972585169378802726699412096419804788592839955774931212661902440349722634193135892266890982441387180317680426791225945510356185911888155994249570068411807118716394494269031818583967836716956796585928799356908324801685046838934735965337155734436292533839414837448954839268822761062079424318959728997983798295248314743704885488673326646113475418138962839044157317478636985193589889168453990085721784703635555836077193479959917404953261333054126571933653320369376849146557682499059480985291754063970565295961007163948203431687180766779742096019958725650380734781337659046811772821448944348067772570132119822938812527314368298279804139987946217837832406523787374943981235683859838645712915696548282428684769471695774867845171882371331721108422619517604131573190354507772

n = 10967510916826867786399636870705964416843517778435051073131091140398879675651701423490430692286910454122642226196622205238376848957901297089291259823676849587605749217202661502092696829872580768071761595878212473740510012749407710046686221237458806876506891003249276279278846041417124019697510993491376856332076815424989932003770672249300450437190406092580821500932734731025870777327866468576621616117651365813889219481588687941360559709016274859702757525748963837773397493571609993146430099659325925713683216163883341581477252741266085592251304558795775638205304233643127453040706578022851367682507594356268145289051

n2 = n*n

gm = (gmpy2.invert(c2, n2)*c1)%n2

print(gm)

'''
POPO - v.1.0.0. Choose your action:

1. Encrypt
2. Knowledge proof
3. Test homomorphic encryption
4. Reset optimization

> 2

Provide gm: 6618811617008773705850875844229479070068940432011979931483869636783248775293674351270638583987607971109238911434434267040721057478917719718011333083918602167591834026383416142981358303039609263042777948010310428603350123125963004005624121137084017742223807783862848336192498364866710629219925439796345569039364001785225719548325113611613840727965007187472208693143653532719370746621191042697294979743750151412478065807113641171324553182072397585295491664903126971787604045101938564776721210517990944597279673512833419293899860941697512555697696604174095666030042798978792970065927735716962123649364875143723494277809577184745496949431122148890893874924762905897986612755189533981331216871457492021153262672769648
{'Î»': 1096751091682686778639963687070596441684351777843505107313109114039887967565170142349043069228691045412264222619662220523837684895790129708929125982367684958760574921720266150209269682987258076807176159587821247374051001274940771004668622123745880687650689100324927627927884604141712401969751099349137685633186648845472184330376391252958893112228366393211648719633622486249138445947542372485028329386737427873269258807776555125471956547879997677073412908135761491930709881474990289428140971568785708814162192911960358715880279744273589040036326051046997795518593779441817142841183198888989393161308889915893574142860}
'''

l = 1096751091682686778639963687070596441684351777843505107313109114039887967565170142349043069228691045412264222619662220523837684895790129708929125982367684958760574921720266150209269682987258076807176159587821247374051001274940771004668622123745880687650689100324927627927884604141712401969751099349137685633186648845472184330376391252958893112228366393211648719633622486249138445947542372485028329386737427873269258807776555125471956547879997677073412908135761491930709881474990289428140971568785708814162192911960358715880279744273589040036326051046997795518593779441817142841183198888989393161308889915893574142860

'''
POPO - v.1.0.0. Choose your action:

1. Encrypt
2. Knowledge proof
3. Test homomorphic encryption
4. Reset optimization

> 4

POPO - v.1.0.0. Choose your action:

1. Encrypt
2. Knowledge proof
3. Test homomorphic encryption
4. Reset optimization

> 1

Provide a message: 1
{'c': 40660921206002463364598209906616246208857068411352249373383927672521126471932865146559730669537556074133414961559330952514606529940134370362461265590938965285242483909149386573152006915223572474999580686370840425997717712727759440526116672092758887903940307209284886308229869578268188975751588303073301677476881644955405604599765448347521586831212473109528973972132735718334297563931355470006589074670444045374532321701992313681461136066174094486389382557440848050653102095355008289328437384952508705175972419876972127167033350814537924157438295918925504510906691479838513868940968529945497329979698726664205633269162345669086607775227207991458012683660057155842367738779105496478190908207992341675346037200953074140970524976567233723538416029829698387941047799449946854767774372479490215238646406743396304358033036726616608314329494734443434310049269084727098315601038454622104851977501324044575712262878473294100246882084340463996713939619214756331594505092703359749318552693987282635517703311634775023208793122963941937221908579636871856674787929306704773754471170550020768595487823313410055311796171183820734403047783297125303543285961032962052155448243540756989406359573610269832969598073090075156242347392129308047930264377136, 'n': 10967510916826867786399636870705964416843517778435051073131091140398879675651701423490430692286910454122642226196622205238376848957901297089291259823676849587605749217202661502092696829872580768071761595878212473740510012749407710046686221237458806876506891003249276279278846041417124019697510993491376856332076815424989932003770672249300450437190406092580821500932734731025870777327866468576621616117651365813889219481588687941360559709016274859702757525748963837773397493571609993146430099659325925713683216163883341581477252741266085592251304558795775638205304233643127453040706578022851367682507594356268145289051}

'''
cg = 40660921206002463364598209906616246208857068411352249373383927672521126471932865146559730669537556074133414961559330952514606529940134370362461265590938965285242483909149386573152006915223572474999580686370840425997717712727759440526116672092758887903940307209284886308229869578268188975751588303073301677476881644955405604599765448347521586831212473109528973972132735718334297563931355470006589074670444045374532321701992313681461136066174094486389382557440848050653102095355008289328437384952508705175972419876972127167033350814537924157438295918925504510906691479838513868940968529945497329979698726664205633269162345669086607775227207991458012683660057155842367738779105496478190908207992341675346037200953074140970524976567233723538416029829698387941047799449946854767774372479490215238646406743396304358033036726616608314329494734443434310049269084727098315601038454622104851977501324044575712262878473294100246882084340463996713939619214756331594505092703359749318552693987282635517703311634775023208793122963941937221908579636871856674787929306704773754471170550020768595487823313410055311796171183820734403047783297125303543285961032962052155448243540756989406359573610269832969598073090075156242347392129308047930264377136
g = (gmpy2.invert(c2, n2)*cg)%n2

u = gmpy2.invert((pow(g, l , n2) - 1)//n, n2)%n

m = (((pow(c1, l , n2) - 1)//n)*u)%n

print(bytes.fromhex(hex(m)[2:]))

#HTB{s0_r3p3t1t10n_15_4_p41ll13r_thr34t!}
